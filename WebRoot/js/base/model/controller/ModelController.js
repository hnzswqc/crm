/*
 * File: model/controller/ModelController.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Model.controller.ModelController', {
    extend: 'Ext.app.Controller',

    id: 'ModelController',
    models: [
        'Model'
    ],
    stores: [
        'ModelGridPanelStore'
    ],
    views: [
        'ModelViewport',
        'ModelWindow'
    ],
	
    //刷新按钮
    onModel_reload_btnClick: function(button, e, eOpts) {
		this.modelGridPanelStoreReload(null);
    },
    //添加按钮
    onModel_add_btnClick: function(button, e, eOpts) {
    	 var gridPanel = Ext.getCmp("ModelSubTreePanel");
         var selectionModel = gridPanel.getSelectionModel();
         if(selectionModel.getCount()<=0){
             Ext.Msg.show({
 				title : '提示信息',
 				msg :'请先选择一个子系统!',
 				buttons : Ext.Msg.OK,
 				icon : Ext.MessageBox.WARNING
 			});
             return;
         }
        var data = selectionModel.getSelection()[0].data;
    	Ext.create("Model.view.ModelWindow",{title:'添加模块',icon:'img/add.png'}).show();
    	Ext.getCmp("modelSubsystemUuid").setValue(data.id);
    },
    //修改按钮
    onModel_upd_btnClick: function(button, e, eOpts) {
    	   var gridPanel = Ext.getCmp("ModelGridPanel");
           var selectionModel = gridPanel.getSelectionModel();
           if(selectionModel.getCount()<=0){
               Ext.Msg.show({
   				title : '提示信息',
   				msg :'请先选择一条信息!',
   				buttons : Ext.Msg.OK,
   				icon : Ext.MessageBox.WARNING
   			});
               return;
           }
           Ext.create("Model.view.ModelWindow",{title:'修改模块',icon:'img/update.png'}).show();
           Ext.getCmp("ModelForm").loadRecord(selectionModel.getSelection()[0]);
    },
    //保存按钮
    onModel_save_btnClick: function(button, e, eOpts) {
    	 var formPanel = Ext.getCmp("ModelForm");
       	 if(!formPanel.isDirty()){
       		 Ext.getCmp("ModelWindow").close();
    		 return;
       	 }
    	 if(formPanel.isValid()){
    		 Ext.MessageBox.confirm("提示信息", "确定要保存吗？", function (btnId) {
    			if(btnId=='yes'){
    				 formPanel.submit({
        				 url:'model/addModel.do',
    		             method:'POST',
    		             waitTitle : "提示",
    		             waitMsg: '正在提交数据，请稍后...',
    		             params:formPanel.form.getValues(),
    		             success: function(form, action){
    		        	    var result = JSON.parse(action.response.responseText); 
    		            	if(result.success){
    		            		 Ext.Msg.show({title : '提示信息',msg :'操作成功!',buttons : Ext.Msg.OK,icon : Ext.MessageBox.INFO});
    		            		 Ext.getCmp("ModelWindow").close();
    		            		 this.onModel_reload_btnClick();
    		            	}else{
    		            		 Ext.Msg.show({title : '提示信息',msg :'操作失败!',buttons : Ext.Msg.OK,icon : Ext.MessageBox.INFO});
    		            	}
    		            },
    		            failure: function(form, action){
    		            	onActionFailureTypeShow(action);
    		            },
    		            scope:this
        			 });
    			}
    		 },this);
    	 }
    },
    //关闭按钮
    onModel_close_btnClick: function(button, e, eOpts) {
    	Ext.getCmp("ModelWindow").close();
    },
    //高级查询按钮
    onModel_search_form_btnClick: function(button, e, eOpts) {
    	 var panel = Ext.getCmp("ModelSearchForm");
         if(panel.isHidden()){
             panel.show();
         }else{
             panel.hide();
         }
    },
    
    //定时器,解决单击事件双击事件问题
    task:new Ext.util.DelayedTask(),
    //双击事件
    onGridpanelCellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
    	 Ext.create("Model.view.ModelWindow",{title:'修改模块',icon:'img/update.png'}).show();
         Ext.getCmp("ModelForm").loadRecord(record);
    },
    //单击事件
    onGridpanelCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
    	Ext.getCmp("Model_upd_btn").enable(true);
    	if(record.data.child<=0){
    		Ext.getCmp("Model_del_btn").enable(false);
    	}else{
    		Ext.getCmp("Model_del_btn").setDisabled(true);
    	}
    },
    //删除按钮
    onModel_del_btnClick: function(button, e, eOpts) {
    	  var gridPanel = Ext.getCmp("ModelGridPanel");
          var selectionModel = gridPanel.getSelectionModel();
          if(selectionModel.getCount()<=0){
              Ext.Msg.show({
  				title : '提示信息',
  				msg :'请先选择一条信息!',
  				buttons : Ext.Msg.OK,
  				icon : Ext.MessageBox.WARNING
  			});
              return;
          }
          Ext.MessageBox.confirm("提示信息", "确定要删除吗？", function (btnId) {
        	  if(btnId=="yes"){
        		    Ext.Msg.wait('正在处理数据，请稍候...','提示');
        			Ext.Ajax.request({
        	  		    url: 'model/delModel.do',
        	  		    params: selectionModel.getSelection()[0].data,
        	  		    success: function(response){
        	  		    	Ext.Msg.hide();
        	  		        var jsonBean = JSON.parse(response.responseText);
        	  		        if(jsonBean.success){
        	  		          Ext.Msg.show({
        	  	  				title : '提示信息',
        	  	  				msg :'删除成功！',
        	  	  				buttons : Ext.Msg.OK,
        	  	  				icon : Ext.MessageBox.INFO
        	  		          });
        	  		        this.onModel_reload_btnClick();
        	  		        }else{
        	  		        	Ext.Msg.show({
        	  	  	  				title : '提示信息',
        	  	  	  				msg :'删除失败！',
        	  	  	  				buttons : Ext.Msg.OK,
        	  	  	  				icon : Ext.MessageBox.WARNING
        	  	  		          });
        	  		        }
        	  		    },
        	  		    failure: function(){
        	  		    	Ext.Msg.hide();
        	  		    	onActionFailureTypeShow(action);
        	  		    },
        	   		    scope:this
        	  		});
        	  }
          },this);
    },
    //查询按钮
    onModel_search_btnClick: function(button, e, eOpts) {
    	this.modelGridPanelStoreReload(Ext.getCmp("ModelSearchForm").getForm().getValues());
    },
    //重置按钮
    onModel_reset_btnClick: function(button, e, eOpts) {
    	Ext.getCmp("modelTitle").setValue(null);
    	Ext.getCmp("modelState").setValue(null);
    	this.modelGridPanelStoreReload(null);
    },
    //重新加载数据
    modelGridPanelStoreReload:function(data){
    	var gridPanel = Ext.getCmp("ModelGridPanel");
		gridPanel.store.setProxy({
	    		 type: 'ajax', 
	    		 url: 'model/getModelPage.do',
	    		 extraParams:data,
			 	 reader: {
	    			 type: 'json',
	          	  	 //数据格式为json
	                 root: 'data',   
	                 //获取数据总数 
	                 totalProperty: 'dataSize'
			 	}
		 }); 
		gridPanel.store.load(); 
    },
    //父级菜单选择事件
    onModelSubsystemUuidSelect:function(combobox,record,eOpts){
			if(DEFAULT_ROOT_UUID==record.data.id){
				Ext.Msg.show({
					title : '提示信息',
					msg :'不能选择根目录!',
					buttons : Ext.Msg.OK,
					icon : Ext.MessageBox.WARNING
				 });
				combobox.setValue("");
    		}
    },
  //双击事件
    onModelSubTreePanelCellDblClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
    	//暂无触发事件
    },
    //单击事件
    onModelSubTreePanelCellClick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts) {
    	Ext.getCmp("Model_add_btn").enable(true);
    	this.modelGridPanelStoreReload({"modelSubsystemUuid":record.data.id});
    },
    init: function(application) {
        this.control({
            "button[id=Model_reload_btn]": {
                click: this.onModel_reload_btnClick
            },
            "button[id=Model_add_btn]": {
                click: this.onModel_add_btnClick
            },
            "button[id=Model_upd_btn]": {
                click: this.onModel_upd_btnClick
            },
            "button[id=Model_save_btn]": {
                click: this.onModel_save_btnClick
            },
            "button[id=Model_close_btn]": {
                click: this.onModel_close_btnClick
            },
            "button[id=Model_del_btn]":{
            	click: this.onModel_del_btnClick
            },
            "button[id=Model_search_form_btn]":{
            	click: this.onModel_search_form_btnClick
            },
            "button[id=Model_search_btn]":{
            	click: this.onModel_search_btnClick
            },
            "button[id=Model_reset_btn]":{
            	click: this.onModel_reset_btnClick
            },
            "#ModelGridPanel": {
                cellclick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts){
    				this.task.delay(200,this.onGridpanelCellClick,this,new Array(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts));
	    		},
	    		celldblclick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts){
	    			this.task.delay(200,this.onGridpanelCellDblClick,this,new Array(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts));
	    		}
            },
            "#modelSubsystemUuid":{
            	select:this.onModelSubsystemUuidSelect
            },
            "#ModelSubTreePanel":{
            	cellclick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts){
					this.task.delay(200,this.onModelSubTreePanelCellClick,this,new Array(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts));
	    		},
	    		celldblclick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts){
	    			this.task.delay(200,this.onModelSubTreePanelCellDblClick,this,new Array(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts));
	    		}
            }
        });
    }

});
