/*
 * File: role/controller/RoleController.js
 *
 * This file was generated by Sencha Architect version 2.2.3.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 4.2.x library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 4.2.x. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('Role.controller.RoleController', {
    extend: 'Ext.app.Controller',

    id: 'RoleController',
    models: [
        'RoleModel'
    ],
    stores: [
        'RoleGridPanelStore',
        'RoleStateStore'
    ],
    views: [
        'RoleViewport',
        'RoleWindow',
        'RolePowerWindow'
    ],

    //刷新按钮
    onRole_refresh_btnClick: function(button, e, eOpts) {
        Ext.getCmp("roleGridPanel").store.load();
    },

    //添加按钮
    onRole_add_btnClick: function(button, e, eOpts) {
        Ext.create("Role.view.RoleWindow",{title:'添加角色信息',icon:'img/add.png'}).show();
    },

    //关闭按钮
    onRole_close_btnClick: function(button, e, eOpts) {
        Ext.getCmp("RoleWindow").close();
    },

    //分配权限按钮
    onRole_power_btnClick: function(button, e, eOpts) {
    	var gridPanel = Ext.getCmp("roleGridPanel");
        var selectionModel = gridPanel.getSelectionModel();
        if(selectionModel.getCount()<=0){
            Ext.Msg.show({
				title : '提示信息',
				msg :'请先选择一条角色信息!',
				buttons : Ext.Msg.OK,
				icon : Ext.MessageBox.WARNING
			});
            return;
        }
        var data = selectionModel.getSelection()[0].data;
        Ext.create("Role.view.RolePowerWindow",{title:'分配权限',icon:'img/user.png'}).show();
        //加载已经存在的角色信息。
        var gridPanel = Ext.getCmp("RolePowerTreePanel");
    	gridPanel.store.setProxy({
	    		 type: 'ajax', 
	    		 url: 'role/getAuthority.do',
	    		 extraParams:data,
    		 	 reader: {
	    			 type: 'json'
    		 	}
		 }); 
    	gridPanel.store.load();
    	gridPanel.addListener("checkchange",this.onRolePowerTreePanelCheckchange,this);
    },
    //复选框选中事件
    onRolePowerTreePanelCheckchange:function(node,checked){
         this.selectChildNodes(node,checked);//选定子节点  
         if(node.parentNode){
             this.selectParentNodes(node.parentNode,checked);//是否选定父节点  
         }  
    },
    //选中子级别
    selectChildNodes:function(Node,checked){  
        Node.eachChild(function(node){ 
    		node.set('checked',checked);
            if(!node.loaded){  
                node.expand();  
            }
            if(!node.leaf){
            	 this.selectChildNodes(node,checked);  
            }
        },this); 
    }, 
    //选中父级别
    selectParentNodes:function(Node,checked){ 
    	if(checked){
    		Node.set('checked',true);
    	}
    	if(Node.parentNode){  
            this.selectParentNodes(Node.parentNode,checked);//是否选定父节点  
        }  
    }, 
    //折叠按钮
    onRole_folder_btnClick: function(button, e, eOpts) {
    	Ext.getCmp("RolePowerTreePanel").collapseAll();
    },
    //展开按钮
    onRole_folder_open_btnClick: function(button, e, eOpts) {
    	Ext.getCmp("RolePowerTreePanel").expandAll();
    },
    //分配权限关闭按钮
    onRole_power_close_btnClick: function(button, e, eOpts) {
        Ext.getCmp("RolePowerWindow").close();
    },
    //分配权限保存按钮
    onRole_power_save_btnClick: function(button, e, eOpts) {
        var foreignKeys="";
        var foreignKeyTexts="";
        var types="";
        var roleUuid=Ext.getCmp("roleGridPanel").getSelectionModel().getSelection()[0].data.roleUuid;
        var selections=Ext.getCmp("RolePowerTreePanel").getChecked();
        var i =0;
        Ext.each(selections, function(node){ 
        	data = node.data;
        	if(data.id!="root"){
	    		if(i>0){
	    			foreignKeys+=","
	    			foreignKeyTexts+=",";
	    			types+=",";
	    		}
	    		foreignKeys+=data.id;
	    		foreignKeyTexts+=data.text;
	    		types+=data.type;
	    		i++;
    		}
        });
    	 Ext.MessageBox.confirm("提示信息", "确定要保存吗？", function (btnId) {
 			if(btnId=='yes'){
 			Ext.Msg.wait('正在处理数据，请稍候...','提示');
 			   Ext.Ajax.request({
            		url:"role/addAuthority.do",
            		method:"POST",
            		params:{
 				   		'foreignKeys':foreignKeys,
 				   		'foreignKeyTexts':foreignKeyTexts,
 				   		'types':types,
 				   		'roleUuid':roleUuid
 			   		},
            		success:function(responst){
 			   			Ext.Msg.hide();
            			var result = JSON.parse(responst.responseText); 
            			if(result.success){
            				 Ext.Msg.show({
                  				title : '提示信息',
                  				msg :'保存成功!',
                  				buttons : Ext.Msg.OK,
                  				icon : Ext.MessageBox.INFO
                  			 });     
            				 Ext.getCmp("RolePowerWindow").close();
            			}else{
            				 Ext.Msg.show({
               				title : '提示信息',
               				msg :'保存失败!',
               				buttons : Ext.Msg.OK,
               				icon : Ext.MessageBox.ERROR
               			 });     
            			}
            		},
        		    failure: function(from,action){
            			Ext.Msg.hide();
            			onActionFailureTypeShow(action);
            		},
            		scope:this
            	});
 			}
 		 },this);
    },
    //保存按钮
    onRole_save_btnClick: function(button, e, eOpts) {
     var formPanel =  Ext.getCmp("RoleForm");
   	 if(!formPanel.isDirty()){
   		 Ext.getCmp("RoleWindow").close();
    		 return;
   	 }
   	 if(formPanel.isValid()){
   		 Ext.MessageBox.confirm("提示信息", "确定要保存吗？", function (btnId) {
    			if(btnId=='yes'){
    				 formPanel.submit({
        				 url:'role/addRole.do',
    		             method:'POST',
    		             waitTitle : "提示",
    		             waitMsg: '正在提交数据，请稍后...',
    		             success: function(form, action){
    		        	    var result = JSON.parse(action.response.responseText); 
    		            	if(result.success){
    		            		 Ext.Msg.show({title : '提示信息',msg :'操作成功!',buttons : Ext.Msg.OK,icon : Ext.MessageBox.INFO});
    		            		 Ext.getCmp("RoleWindow").close();
    		            		 Ext.getCmp("roleGridPanel").store.load();
    		            	}else{
    		            		 Ext.Msg.show({title : '提示信息',msg :'操作失败!',buttons : Ext.Msg.OK,icon : Ext.MessageBox.INFO});
    		            	}
    		            },
    		            failure: function(form, action){
    		            	onActionFailureTypeShow(action);
    		            },
    		            scope:this
        			 });
    			}
    		 },this);
	 	}
    },
    //修改按钮
    onRole_upd_btnClick: function(button, e, eOpts) {
    	var gridPanel = Ext.getCmp("roleGridPanel");
        var selectionModel = gridPanel.getSelectionModel();
        if(selectionModel.getCount()<=0){
            Ext.Msg.show({
				title : '提示信息',
				msg :'请先选择一条角色信息!',
				buttons : Ext.Msg.OK,
				icon : Ext.MessageBox.WARNING
			});
            return;
        }
        Ext.create("Role.view.RoleWindow",{title:'修改角色信息',icon:'img/update.png'}).show();
        Ext.getCmp("RoleForm").loadRecord(selectionModel.getSelection()[0]);
    },
   //定时器,解决单击事件双击事件问题
    task:new Ext.util.DelayedTask(),
    //双击事件
    onRoleGridPanelCellDblClick:function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts){
    	  Ext.create("Role.view.RoleWindow",{title:'修改角色信息',icon:'img/update.png'}).show();
          Ext.getCmp("RoleForm").loadRecord(record);
    },
    //单击事件
    onRoleGridPanelCellClick:function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts){
		Ext.getCmp("Role_upd_btn").enable(true);
		Ext.getCmp("Role_del_btn").enable(true);
		Ext.getCmp("Role_power_btn").enable(true);
    },
    //删除按钮
    onRole_del_btnClick: function(button, e, eOpts) {
    	 var gridPanel = Ext.getCmp("roleGridPanel");
         var selectionModel = gridPanel.getSelectionModel();
         if(selectionModel.getCount()<=0){
        	 Ext.Msg.show({
      				title : '提示信息',
      				msg :'请选择一条角色信息!',
      				buttons : Ext.Msg.OK,
      				icon : Ext.MessageBox.WARNING
      			});
             return;
         }
         var data = selectionModel.getSelection()[0].data;
         Ext.MessageBox.confirm("提示信息", "确定要删除吗？", function (btnId) {
             if (btnId == "yes") {
            	 Ext.Msg.wait('正在处理数据，请稍候...','提示');
                 Ext.Ajax.request({
             		url:"role/delRole.do",
             		method:"POST",
             		params:data,
             		success:function(responst){
                	 Ext.Msg.hide();
             			var result = JSON.parse(responst.responseText); 
             			if(result.success){
             				 Ext.Msg.show({
                   				title : '提示信息',
                   				msg :'删除成功!',
                   				buttons : Ext.Msg.OK,
                   				icon : Ext.MessageBox.INFO
                   			 });     
             				 Ext.getCmp("roleGridPanel").store.load();
             			}else{
             				 Ext.Msg.show({
                				title : '提示信息',
                				msg :'删除失败!',
                				buttons : Ext.Msg.OK,
                				icon : Ext.MessageBox.ERROR
                			 });     
             			}
             		},
         		    failure: function(from,action){
             			Ext.Msg.hide();
             			onActionFailureTypeShow(action);
             		},
             		scope:this
             	});
             }
         },this);
    },
    //标识名验证
    onRoleKeyTextfieldBlur: function(component, e, eOpts) {
    	if(component.originalValue == component.value){
    		return;
    	}
    	Ext.Ajax.request({
    		url:"role/validateRoleKey.do",
     		method:"POST",
     		params:{
        	 	'roleKey':component.value
         	},
     		success:function(responst){
     			var result = JSON.parse(responst.responseText); 
     			if(result.success){
     				Ext.Msg.show({
        				title : '提示信息',
        				msg : '该数据标识已经存在，请重新输入！',
        				buttons : Ext.Msg.OK,
        				icon : Ext.MessageBox.WARNING
        			 });
     				component.focus();
     				component.setValue("");
     			}
     		},
 		    failure: function(from,action){
     			this.onActionFailureTypeShow(action);
     		},
     		scope:this
    	});
    },
    init: function(application) {
        this.control({
            "button[id=Role_refresh_btn]": {
                click: this.onRole_refresh_btnClick
            },
            "button[id=Role_add_btn]": {
                click: this.onRole_add_btnClick
            },
            "button[id=Role_close_btn]": {
                click: this.onRole_close_btnClick
            },
            "button[id=Role_power_btn]": {
                click: this.onRole_power_btnClick
            },
            "button[id=Role_power_close_btn]": {
                click: this.onRole_power_close_btnClick
            },
            "button[id=Role_power_save_btn]": {
                click: this.onRole_power_save_btnClick
            },
            "button[id=Role_save_btn]": {
                click: this.onRole_save_btnClick
            },
            "button[id=Role_upd_btn]": {
                click: this.onRole_upd_btnClick
            },
            "button[id=Role_del_btn]": {
                click: this.onRole_del_btnClick
            },
            "button[id=Role_folder_btn]": {
                click: this.onRole_folder_btnClick
            },
            "button[id=Role_folder_open_btn]": {
                click: this.onRole_folder_open_btnClick
            },
            "#roleGridPanel":{
            	cellclick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts){
					this.task.delay(200,this.onRoleGridPanelCellClick,this,new Array(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts));
	    		},
	    		celldblclick: function(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts){
	    			this.task.delay(200,this.onRoleGridPanelCellDblClick,this,new Array(tableview, td, cellIndex, record, tr, rowIndex, e, eOpts));
	    		}
            },
            "textfield[id=roleKey]": {
                blur: this.onRoleKeyTextfieldBlur
            }
        });
    }

});
